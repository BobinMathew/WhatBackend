// <auto-generated />
using System;
using CharlieBackend.Data.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CharlieBackend.Api.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CharlieBackend.Core.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(65)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<sbyte?>("Role")
                        .HasColumnType("tinyint")
                        .HasComment("from enum of roles: 1 - student 2 - mentor 4 - admin");

                    b.Property<string>("Salt")
                        .HasColumnType("varchar(65)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Id");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Id");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("IdMentor")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdStudentGroup")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdTheme")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LessonDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdMentor")
                        .HasName("FK_LessonsMentors");

                    b.HasIndex("IdStudentGroup")
                        .HasName("FK_LessonsOfGroup");

                    b.HasIndex("IdTheme")
                        .HasName("FK_ThemeOfLesson");

                    b.ToTable("lessons");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Mentor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("IdAccount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount")
                        .HasName("FK_AccountOfMentor");

                    b.ToTable("mentors");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.MentorOfCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("IdCourse")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdMentor")
                        .HasColumnType("bigint");

                    b.Property<string>("MentorComment")
                        .HasColumnType("varchar(2048)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Id");

                    b.HasIndex("IdMentor")
                        .HasName("FK_OfMentors");

                    b.HasIndex("IdCourse", "IdMentor")
                        .IsUnique()
                        .HasName("AK_UniqueMentorAndCourse");

                    b.ToTable("mentorsofcourses");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.MentorOfStudentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(1024)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<long?>("IdMentor")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdStudentGroup")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdStudentGroup")
                        .HasName("FK_GroupsOf");

                    b.HasIndex("IdMentor", "IdStudentGroup")
                        .IsUnique()
                        .HasName("AK_UniqueStudentGroupAndMentor");

                    b.ToTable("mentorsofstudentgroups");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("IdAccount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount")
                        .HasName("FK_AccountOfStudent");

                    b.ToTable("students");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.StudentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("date");

                    b.Property<long?>("IdCourse")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("IdCourse")
                        .HasName("FK_CourseOfStudentGroup");

                    b.ToTable("studentgroups");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.StudentsOfGroups", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("IdStudent")
                        .HasColumnType("bigint");

                    b.Property<long>("IdStudentGroup")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdStudent")
                        .HasName("FK_StudentOfGroup");

                    b.HasIndex("IdStudentGroup", "IdStudent")
                        .IsUnique()
                        .HasName("AK_UniqueStudentAndGroup");

                    b.ToTable("studentsofgroups");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Theme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Id");

                    b.ToTable("themes");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Visit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(1024)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<long?>("IdLesson")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdStudent")
                        .HasColumnType("bigint");

                    b.Property<bool>("Presence")
                        .HasColumnType("tinyint(1)");

                    b.Property<sbyte?>("StudentMark")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("IdLesson")
                        .HasName("FK_VisitsLessons");

                    b.HasIndex("IdStudent", "IdLesson")
                        .IsUnique()
                        .HasName("AK_UniqueLessonAndStudent");

                    b.ToTable("visits");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Lesson", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Mentor", "IdMentorNavigation")
                        .WithMany("Lessons")
                        .HasForeignKey("IdMentor")
                        .HasConstraintName("FK_LessonsMentors");

                    b.HasOne("CharlieBackend.Core.Entities.StudentGroup", "IdStudentGroupNavigation")
                        .WithMany("Lessons")
                        .HasForeignKey("IdStudentGroup")
                        .HasConstraintName("FK_LessonsOfGroup");

                    b.HasOne("CharlieBackend.Core.Entities.Theme", "IdThemeNavigation")
                        .WithMany("Lessons")
                        .HasForeignKey("IdTheme")
                        .HasConstraintName("FK_ThemeOfLesson");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Mentor", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Account", "IdAccountNavigation")
                        .WithMany("Mentors")
                        .HasForeignKey("IdAccount")
                        .HasConstraintName("FK_AccountOfMentor");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.MentorOfCourse", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Course", "IdCourseNavigation")
                        .WithMany("MentorsOfCourses")
                        .HasForeignKey("IdCourse")
                        .HasConstraintName("FK_OfCourses")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CharlieBackend.Core.Entities.Mentor", "IdMentorNavigation")
                        .WithMany("MentorsOfCourses")
                        .HasForeignKey("IdMentor")
                        .HasConstraintName("FK_OfMentors")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.MentorOfStudentGroup", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Mentor", "IdMentorNavigation")
                        .WithMany("MentorsOfStudentGroups")
                        .HasForeignKey("IdMentor")
                        .HasConstraintName("FK_MentorsOf");

                    b.HasOne("CharlieBackend.Core.Entities.StudentGroup", "IdStudentGroupNavigation")
                        .WithMany("MentorsOfStudentGroups")
                        .HasForeignKey("IdStudentGroup")
                        .HasConstraintName("FK_GroupsOf")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Student", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Account", "IdAccountNavigation")
                        .WithMany("Students")
                        .HasForeignKey("IdAccount")
                        .HasConstraintName("FK_AccountOfStudent");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.StudentGroup", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Course", "IdCourseNavigation")
                        .WithMany("StudentGroups")
                        .HasForeignKey("IdCourse")
                        .HasConstraintName("FK_CourseOfStudentGroup")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.StudentsOfGroups", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Student", "IdStudentNavigation")
                        .WithMany("StudentsOfGroups")
                        .HasForeignKey("IdStudent")
                        .HasConstraintName("FK_StudentOfGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.StudentGroup", "IdStudentGroupNavigation")
                        .WithMany("StudentsOfGroups")
                        .HasForeignKey("IdStudentGroup")
                        .HasConstraintName("FK_GroupOfStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Visit", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Lesson", "IdLessonNavigation")
                        .WithMany("Visits")
                        .HasForeignKey("IdLesson")
                        .HasConstraintName("FK_VisitsLessons");

                    b.HasOne("CharlieBackend.Core.Entities.Student", "IdStudentNavigation")
                        .WithMany("Visits")
                        .HasForeignKey("IdStudent")
                        .HasConstraintName("FK_VisitOfStudent");
                });
#pragma warning restore 612, 618
        }
    }
}
